{"version":3,"sources":["components/InfoEntry.js","components/InfoChange.js","components/FormUpdate.js","components/InfoDisplay.js","App.js","serviceWorker.js","index.js"],"names":["InfoEntry","props","handleChange","target","setState","name","value","handleSubmit","event","fetch","process","method","headers","body","JSON","stringify","state","then","refresh","definition","example","resource","id","className","TextField","label","variant","this","onChange","multiline","rows","Button","color","onClick","React","Component","InfoChange","notes","IconButton","_id","fontSize","InfoDisplay","information","getInformation","response","json","displayName","map","info","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86c653f1.chunk.js","sourcesContent":["import React from 'react';\nimport { TextField } from \"@material-ui/core\";\nimport { Button } from '@material-ui/core';\n\n// grabs the environment variable for the API URL from the process\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass InfoEntry extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            name: \"\",\n            definition: \"\",\n            example: \"\",\n            resource: [ \"\" ]\n        }\n    }\n    handleChange = ({target}) => {\n        this.setState({ [target.name]: target.value });\n    }\n    handleSubmit = (event) => {\n        // event.preventDefault();\n        fetch(`${API_URL}/Info`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        }).then(this.props.refresh)\n            .then(() => this.setState({\n                name: \"\",\n                definition: \"\",\n                example: \"\",\n                resource: [ \"\" ]\n        }))\n    }\n    render() {\n        return (\n            <div> \n                <form id=\"create\" className=\"Padding\">\n                    <div>\n                        <TextField \n                        name=\"name\"\n                        id=\"standard-basic\" \n                        label=\"Fact/Concept\"\n                        variant=\"filled\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField\n                        name=\"definition\"\n                        id=\"outlined-multiline-static\"\n                        label=\"Explain\"\n                        multiline\n                        rows={4}\n                        variant=\"filled\"\n                        value={this.state.definition}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField \n                        name=\"example\"\n                        id=\"standard-basic\" \n                        label=\"Example of code\"\n                        variant=\"filled\"\n                        value={this.state.example}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField \n                        name=\"resource\"\n                        id=\"standard-basic\" \n                        label=\"Link/Recource\"\n                        variant=\"filled\"\n                        value={this.state.resource}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default InfoEntry;","import React from 'react';\nimport { IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport AddIcon from '@material-ui/icons/Add';\nimport FormUpdate from './FormUpdate';\n\n// grabs the environment variable for the API URL from the process\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconst InfoChange = ({ notes, refresh }) => {\n    const deleteNote = () => {\n        fetch(`${API_URL}/Info/${notes._id}`, {\n            method: \"DELETE\"\n        }).then(refresh)\n    } \n    const editNote = () => {\n        //fetch(`${API_URL}/Info/${notes._id}`, {\n        //    method: \"PATCH\"\n        //}).then(refresh)\n    }\n    return (\n        <div>\n            <IconButton color=\"secondary\" onClick={deleteNote}>\n                <DeleteIcon fontSize=\"small\"/>\n            </IconButton>\n            <IconButton color=\"primary\" onClick={editNote}>\n                <AddIcon fontSize=\"small\"/>\n            </IconButton>\n        </div>\n    )\n}\nexport default InfoChange;","import React from 'react';\nimport { TextField } from \"@material-ui/core\";\nimport { Button } from '@material-ui/core';\n\n// grabs the environment variable for the API URL from the process\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass FormUpdate extends React.Component {\n    constructor(props){\n        super(props);\n        const { info } = props;\n        this.state = {\n            name: info.name,\n            definition: info.definition,\n            example: info.example,\n            resource: info.resource\n        }\n    }\n    handleChange = ({target}) => {\n        this.setState({ [target.name]: target.value });\n    }\n    handleSubmit = (event) => {\n        event.preventDefault();\n        fetch(`${API_URL}/Info/${this.props.info._is}`, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\" : \"application/json\"\n            },\n            body: JSON.stringify(this.state)\n        }).then(this.props.refresh)\n            .then(this.props.close)\n    }\n    render() {\n        return (\n            <div> \n                <form id=\"create\" className=\"Padding\">\n                    <div>\n                        <TextField \n                        name=\"name\"\n                        id=\"standard-basic\" \n                        label=\"Fact/Concept\"\n                        variant=\"filled\"\n                        value={this.state.name}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField\n                        name=\"definition\"\n                        id=\"outlined-multiline-static\"\n                        label=\"Explain\"\n                        multiline\n                        rows={4}\n                        variant=\"filled\"\n                        value={this.state.definition}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField \n                        name=\"example\"\n                        id=\"standard-basic\" \n                        label=\"Example of code\"\n                        variant=\"filled\"\n                        value={this.state.example}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <div>\n                        <TextField \n                        name=\"resource\"\n                        id=\"standard-basic\" \n                        label=\"Link/Recource\"\n                        variant=\"filled\"\n                        value={this.state.resource}\n                        onChange={this.handleChange}\n                        />\n                    </div><br/>\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>Submit</Button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default FormUpdate;","import React from 'react'\nimport InfoChange from \"./InfoChange\"\n\n// grabs the environment variable for the API URL from the process\nconst API_URL = process.env.REACT_APP_API_URL;\n\nclass InfoDisplay extends React.Component {\n        state = {\n            information: []\n        }\n        getInformation = () => {\n            fetch(`${API_URL}/Info`) \n                .then(response => response.json())\n                .then(information => this.setState({information}))\n        }\n        componentDidMount() {\n            this.getInformation();\n        }\n    render () {\n    const displayName = this.state.information.map(info => \n        <div>\n            <strong>{info.name}: </strong> \n            {info.definition} \n            <InfoChange notes={info}/>\n        </div>)\n        return (\n            <div>\n                <form className=\"info\">\n                    {displayName} \n                </form>\n            </div>\n        )\n    }\n}\n\nexport default InfoDisplay;","import React from 'react';\nimport './App.css';\nimport InfoEntry from \"./components/InfoEntry\";\nimport InfoDisplay from \"./components/InfoDisplay\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <body>\n        <header className=\"PageD\">\n          <h1>My HTML Coding Catalog</h1>\n          <h3>Below you can see what information<br/>\n          I've input with user ability to add additional<br/>\n          information to the site.</h3>\n        </header>\n        <InfoEntry/>\n        <h3>Study what we got:</h3>\n        <InfoDisplay/>\n        <footer className=\"creator\">\n          <h5><strong>Created by: Arto Sekepyan</strong></h5>\n        </footer>\n      </body>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}